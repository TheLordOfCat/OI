#include <iostream>
#include <stack>
#include <tuple>
#include <vector>
#include <algorithm>

using namespace std;

using ll = long long int;
using ull = unsigned long long int;

const int INF = 2'000'000'000;
const ll llINF = 9'000'000'000'000'000'000;
const ull ullINF = 18'000'000'000'000'000'000;

#define MP make_pair
#define PII pair<int, int>
#define PB push_back
#define MT make_tuple
#define PLL pair<ll,ll>

ll n;

const ll MAXN = 1'000'000'000'000'000'0;

void getData() { 
    cin >> n; 
}

void getRandom() { 
    n = rand() % 20 + 51;
}

void printData() { 
    cout << "DATA: \n" << n << "\n"; 
}

ll gcd(ll a, ll b){
    if(b == 0){
        return a;
    }
    return gcd(b, a%b);
}

ll numDivisors(ll num){
    ll ans = 0;
    for(ll i = 1; i*i <=num; i++){
        if(num%i == 0){
            ans+=2;
            if(i == num/i){
                ans--;
            }
        }
    }

    return ans;
}

tuple<ll, ll, ll> brute() {
    tuple<ll, ll, ll> ans = MT(0, 0, 0);

    for(int i = 1; i<=n; i++){
        for(int j = 1; j<=n; j++){
            ll div1 = numDivisors(i);
            ll div2 = numDivisors(j);
            ll g = numDivisors(gcd(i,j));

            ll temp = div1 + div2 - g;
            if( temp > get<0>(ans)){
                ans = MT(temp, i,j);
            }
        }
    }

    return ans;
}

vector<ll> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43};

tuple<ll, ll, ll> solve() {
    if(n<=48){ // to litlle to be anitPimred 
        tuple<ll, ll, ll> ans = MT(0, 0, 0);
        for(int i = 1; i<=n; i++){
            for(int j = 1; j<=n; j++){
                ll div1 = numDivisors(i);
                ll div2 = numDivisors(j);
                ll g = numDivisors(gcd(i,j));

                ll temp = div1 + div2 - g;
                if( temp > get<0>(ans)){
                    ans = MT(temp, i,j);
                }
            }
        }
        return ans;
    }

    //get range
    vector<tuple<ll, ll, ll>> range;

    range.PB(MT(68832, 8904885761772000, 8608315024108800));
    range.PB(MT(67680, 8608315024108800, 8014397185594800));
    range.PB(MT(67584, 8014397185594800, 7173595853424000));
    range.PB(MT(66048, 7825740931008000, 7480104039888480));
    range.PB(MT(65536, 7173595853424000, 6411517748475840));
    range.PB(MT(65088, 7123908609417600, 6456236268081600));
    range.PB(MT(64512, 5869305698256000, 5342931457063200));
    range.PB(MT(63360, 5342931457063200, 5262136143264000));
    range.PB(MT(60384, 5198527904169600, 4823624797992000));
    range.PB(MT(59776, 4452576736608000, 4274345165650560));
    range.PB(MT(59520, 4452442880886000, 4304157512054400));
    range.PB(MT(59136, 4274345165650560, 3912870465504000));
    range.PB(MT(58752, 3912870465504000, 3561954304708800));
    range.PB(MT(57384, 3858899838393600, 3561954304708800));
    range.PB(MT(57024, 3561954304708800, 3508090762176000));
    range.PB(MT(56064, 3465685269446400, 3339432552456000));
    range.PB(MT(55680, 2968384491072000, 2671465728531600));
    range.PB(MT(55296, 2934652849128000, 2671465728531600));
    range.PB(MT(54608, 2894174878795200, 2888071057872000));
    range.PB(MT(54528, 2671465728531600, 2631068071632000));
    range.PB(MT(52800, 2599263952084800, 2473653742560000));
    range.PB(MT(52736, 2226288368304000, 2137172582825280));
    range.PB(MT(52224, 2137172582825280, 1956435232752000));
    range.PB(MT(51456, 1956435232752000, 1780977152354400));
    range.PB(MT(50112, 1780977152354400, 1754045381088000));
    range.PB(MT(49536, 1732842634723200, 1607874932664000));
    range.PB(MT(48384, 1619118813312000, 1588439081829600));
    range.PB(MT(48320, 1602879437118960, 1484192245536000));
    range.PB(MT(47808, 1484192245536000, 1299631976042400));
    range.PB(MT(47616, 1467326424564000, 1424781721883520));
    range.PB(MT(47488, 1444035528936000, 1335773020982400));
    range.PB(MT(46464, 1155228423148800, 1113144184152000));
    range.PB(MT(45696, 1113144184152000, 1068586291412640));
    range.PB(MT(45312, 1068586291412640, 978217616376000));
    range.PB(MT(44640, 1060137318240000, 1010824870255200));
    range.PB(MT(44544, 989461497024000, 866421317361600));
    range.PB(MT(44160, 978217616376000, 890488576177200));
    range.PB(MT(43488, 890515347321600, 890488576177200));
    range.PB(MT(43200, 866421317361600, 742096122768000));
    range.PB(MT(42240, 809559406656000, 794219540914800));
    range.PB(MT(42048, 782574093100800, 712390860941760));
    range.PB(MT(41856, 742096122768000, 712390860941760));
    range.PB(MT(41568, 722017764468000, 701618152435200));
    range.PB(MT(40896, 673883246836800, 636082390944000));
    range.PB(MT(40704, 577614211574400, 556572092076000));
    range.PB(MT(39168, 494730748512000, 433210658680800));
    range.PB(MT(38208, 481345176312000, 445257673660800));
    range.PB(MT(38016, 433210658680800, 404779703328000));
    range.PB(MT(37120, 424054927296000, 404329948102080));
    range.PB(MT(36864, 385076141049600, 371048061384000));
    range.PB(MT(36288, 371048061384000, 356195430470880));
    range.PB(MT(36080, 361008882234000, 350809076217600));
    range.PB(MT(35712, 336941623418400, 318041195472000));
    range.PB(MT(35568, 296838449107200, 288807105787200));
    range.PB(MT(35328, 288807105787200, 269853135552000));
    range.PB(MT(33792, 247365374256000, 216605329340400));
    range.PB(MT(33120, 240672588156000, 222628836830400));
    range.PB(MT(32992, 231045684629760, 222628836830400));
    range.PB(MT(32832, 216605329340400, 202389851664000));
    range.PB(MT(32640, 212027463648000, 202164974051040));
    range.PB(MT(32256, 192538070524800, 185524030692000));
    range.PB(MT(31360, 185524030692000, 173284263472320));
    range.PB(MT(31232, 179902090368000, 173284263472320));
    range.PB(MT(31104, 144403552893600, 134926567776000));
    range.PB(MT(29568, 134926567776000, 115522842314880));
    range.PB(MT(28992, 134776649367360, 127216478188800));
    range.PB(MT(28928, 115522842314880, 101194925832000));
    range.PB(MT(28224, 101194925832000, 96269035262400));
    range.PB(MT(27936, 96795146448000, 96269035262400));
    range.PB(MT(27648, 89951045184000, 86642131736160));
    range.PB(MT(27072, 80955940665600, 72201776446800));
    range.PB(MT(26880, 72201776446800, 67463283888000));
    range.PB(MT(26112, 67463283888000, 57761421157440));
    range.PB(MT(25504, 64530097632000, 57761421157440));
    range.PB(MT(25152, 57761421157440, 53970627110400));
    range.PB(MT(24768, 53970627110400, 48134517631200));
    range.PB(MT(24192, 48134517631200, 40477970332800));
    range.PB(MT(24064, 44975522592000, 43321065868080));
    range.PB(MT(23424, 43321065868080, 40477970332800));
    range.PB(MT(23040, 38507614104960, 33731641944000));
    range.PB(MT(22656, 33731641944000, 28880710578720));
    range.PB(MT(22272, 32265048816000, 28880710578720));
    range.PB(MT(22176, 28880710578720, 26985313555200));
    range.PB(MT(21600, 26985313555200, 24067258815600));
    range.PB(MT(20928, 24067258815600, 22487761296000));
    range.PB(MT(20480, 22487761296000, 21660532934040));
    range.PB(MT(20160, 20238985166400, 19253807052480));
    range.PB(MT(19968, 19253807052480, 16865820972000));
    range.PB(MT(19680, 18632716502400, 16132524408000));
    range.PB(MT(19328, 17599117536000, 14440355289360));
    range.PB(MT(19200, 14440355289360, 13492656777600));
    range.PB(MT(18432, 13492656777600, 12033629407800));
    range.PB(MT(18040, 12906019526400, 11645447814000));
    range.PB(MT(17664, 11243880648000, 9626903526240));
    range.PB(MT(17408, 11179629901440, 10755016272000));
    range.PB(MT(17280, 9316358251200, 8799558768000));
    range.PB(MT(16512, 8995104518400, 7220177644680));
    range.PB(MT(16416, 8799558768000, 8539995063600));
    range.PB(MT(16320, 8066262204000, 7453086600960));
    range.PB(MT(16224, 7220177644680, 6746328388800));
    range.PB(MT(15936, 7170010848000, 6987268688400));
    range.PB(MT(15872, 6987268688400, 6844101264000));
    range.PB(MT(15840, 6746328388800, 4813451763120));
    range.PB(MT(15552, 5866372512000, 4658179125600));
    range.PB(MT(15232, 5589814950720, 5377508136000));
    range.PB(MT(14976, 4658179125600, 4399779384000));
    range.PB(MT(14464, 4399779384000, 3726543300480));
    range.PB(MT(14176, 4302006508800, 4192361213040));
    range.PB(MT(14112, 4033131102000, 3726543300480));
    range.PB(MT(14016, 3881815938000, 3519823507200));
    range.PB(MT(13960, 3726543300480, 3226504881600));
    range.PB(MT(13824, 3519823507200, 3105452750400));
    range.PB(MT(13728, 3105452750400, 2933186256000));
    range.PB(MT(13440, 2933186256000, 2329089562800));
    range.PB(MT(13056, 2794907475360, 2688754068000));
    range.PB(MT(12960, 2346549004800, 2329089562800));
    range.PB(MT(12672, 2329089562800, 2199889692000));
    range.PB(MT(12544, 2199889692000, 1863271650240));
    range.PB(MT(12288, 1863271650240, 1759911753600));
    range.PB(MT(12096, 1759911753600, 1552726375200));
    range.PB(MT(11904, 1552726375200, 1466593128000));
    range.PB(MT(11520, 1466593128000, 1397453737680));
    range.PB(MT(11280, 1397453737680, 1173274502400));
    range.PB(MT(11088, 1173274502400, 1164544781400));
    range.PB(MT(10752, 977728752000, 931635825120));
    range.PB(MT(10656, 931635825120, 879955876800));
    range.PB(MT(10368, 879955876800, 776363187600));
    range.PB(MT(10080, 776363187600, 733296564000));
    range.PB(MT(9984, 733296564000, 621090550080));
    range.PB(MT(9792, 621090550080, 586637251200));
    range.PB(MT(9600, 586637251200, 465817912560));
    range.PB(MT(9216, 488864376000, 465817912560));
    range.PB(MT(9088, 465817912560, 463134672000));
    range.PB(MT(8704, 449755225920, 419026608000));
    range.PB(MT(8640, 391091500800, 388181593800));
    range.PB(MT(8496, 310545275040, 293318625600));
    range.PB(MT(8112, 293318625600, 232908956280));
    range.PB(MT(7872, 283026744000, 240940299600));
    range.PB(MT(7776, 267711444000, 234654900480));
    range.PB(MT(7744, 257002986240, 231567336000));
    range.PB(MT(7728, 240940299600, 226421395200));
    range.PB(MT(7680, 232908956280, 195545750400));
    range.PB(MT(7632, 231567336000, 214169155200));
    range.PB(MT(7552, 224877612960, 209513304000));
    range.PB(MT(7488, 195545750400, 155272637520));
    range.PB(MT(7344, 185253868800, 160626866400));
    range.PB(MT(7296, 160626866400, 154378224000));
    range.PB(MT(7200, 155272637520, 146659312800));
    range.PB(MT(6912, 154378224000, 128501493120));
    range.PB(MT(6880, 146659312800, 128501493120));
    range.PB(MT(6784, 128501493120, 115783668000));
    range.PB(MT(6624, 115783668000, 107084577600));
    range.PB(MT(6528, 102918816000, 96376119840));
    range.PB(MT(6336, 92626934400, 80313433200));
    range.PB(MT(6240, 80313433200, 77189112000));
    range.PB(MT(6048, 77189112000, 64250746560));
    range.PB(MT(5952, 74959204320, 66162096000));
    range.PB(MT(5928, 64250746560, 61751289600));
    range.PB(MT(5832, 61751289600, 53542288800));
    range.PB(MT(5664, 53542288800, 51459408000));
    range.PB(MT(5632, 51459408000, 48188059920));
    range.PB(MT(5440, 48188059920, 41167526400));
    range.PB(MT(5424, 46313467200, 42833831040));
    range.PB(MT(5376, 42833831040, 38594556000));
    range.PB(MT(5280, 41902660800, 37479602160));
    range.PB(MT(5184, 32125373280, 30875644800));
    range.PB(MT(5040, 30875644800, 26771144400));
    range.PB(MT(4848, 26771144400, 25729704000));
    range.PB(MT(4736, 25729704000, 24094029960));
    range.PB(MT(4704, 23156733600, 21416915520));
    range.PB(MT(4608, 21416915520, 19297278000));
    range.PB(MT(4512, 20583763200, 16062686640));
    range.PB(MT(4440, 16062686640, 15437822400));
    range.PB(MT(4248, 15437822400, 13385572200));
    range.PB(MT(4080, 13385572200, 12350257920));
    range.PB(MT(4032, 10708457760, 10291881600));
    range.PB(MT(3840, 10291881600, 8031343320));
    range.PB(MT(3712, 9081072000, 8031343320));
    range.PB(MT(3696, 8031343320, 7718911200));
    range.PB(MT(3600, 7718911200, 5354228880));
    range.PB(MT(3528, 7264857600, 6983776800));
    range.PB(MT(3456, 5354228880, 5145940800));
    range.PB(MT(3204, 4994589600, 4655851200));
    range.PB(MT(3200, 4888643760, 4410806400));
    range.PB(MT(3192, 4655851200, 4540536000));
    range.PB(MT(3120, 4540536000, 3491888400));
    range.PB(MT(3090, 4439635200, 4190266080));
    range.PB(MT(3072, 4190266080, 3430627200));
    range.PB(MT(3060, 3632428800, 3491888400));
    range.PB(MT(2976, 3491888400, 3027024000));
    range.PB(MT(2912, 3405402000, 2793510720));
    range.PB(MT(2880, 2677114440, 2572970400));
    range.PB(MT(2736, 2327925600, 2270268000));
    range.PB(MT(2688, 2270268000, 1862340480));
    range.PB(MT(2656, 2095133040, 2018016000));
    range.PB(MT(2592, 1816214400, 1745944200));
    range.PB(MT(2496, 1513512000, 1396755360));
    range.PB(MT(2448, 1396755360, 1362160800));
    range.PB(MT(2376, 1210809600, 1163962800));
    range.PB(MT(2352, 1163962800, 1089728640));
    range.PB(MT(2304, 1135134000, 931170240));
    range.PB(MT(2268, 931170240, 908107200));
    range.PB(MT(2220, 908107200, 698377680));
    range.PB(MT(2120, 807206400, 698377680));
    range.PB(MT(2112, 698377680, 605404800));
    range.PB(MT(2016, 605404800, 581981400));
    range.PB(MT(1968, 581981400, 544864320));
    range.PB(MT(1944, 465585120, 454053600));
    range.PB(MT(1848, 454053600, 349188840));
    range.PB(MT(1804, 403603200, 349188840));
    range.PB(MT(1776, 349188840, 302702400));
    range.PB(MT(1728, 302702400, 232792560));
    range.PB(MT(1680, 259459200, 232792560));
    range.PB(MT(1620, 232792560, 227026800));
    range.PB(MT(1536, 220540320, 201801600));
    range.PB(MT(1488, 201801600, 174594420));
    range.PB(MT(1480, 183783600, 181621440));
    range.PB(MT(1440, 151351200, 116396280));
    range.PB(MT(1416, 129729600, 116396280));
    range.PB(MT(1344, 116396280, 108108000));
    range.PB(MT(1316, 110270160, 100900800));
    range.PB(MT(1272, 104781600, 98017920));
    range.PB(MT(1248, 86486400, 77597520));
    range.PB(MT(1206, 73513440, 69854400));
    range.PB(MT(1170, 69854400, 61261200));
    range.PB(MT(1152, 61261200, 60540480));
    range.PB(MT(1104, 58198140, 43243200));
    range.PB(MT(1096, 55135080, 50450400));
    range.PB(MT(1092, 52390800, 49008960));
    range.PB(MT(1080, 49008960, 46569600));
    range.PB(MT(1056, 43243200, 38798760));
    range.PB(MT(1024, 38808000, 36756720));
    range.PB(MT(1020, 36756720, 34927200));
    range.PB(MT(972, 34927200, 30630600));
    range.PB(MT(960, 30630600, 30270240));
    range.PB(MT(936, 24504480, 23284800));
    range.PB(MT(888, 23284800, 18378360));
    range.PB(MT(864, 19958400, 18378360));
    range.PB(MT(848, 18378360, 15523200));
    range.PB(MT(818, 17463600, 16336320));
    range.PB(MT(808, 16632000, 12252240));
    range.PB(MT(800, 16336320, 16216200));
    range.PB(MT(792, 12252240, 11642400));
    range.PB(MT(720, 11642400, 9189180));
    range.PB(MT(708, 9979200, 9189180));
    range.PB(MT(690, 9189180, 7761600));
    range.PB(MT(680, 8731800, 8168160));
    range.PB(MT(672, 6652800, 6126120));
    range.PB(MT(651, 6350400, 6126120));
    range.PB(MT(648, 6126120, 5821200));
    range.PB(MT(624, 5821200, 5765760));
    range.PB(MT(600, 4989600, 4084080));
    range.PB(MT(576, 4084080, 3326400));
    range.PB(MT(560, 3991680, 3603600));
    range.PB(MT(552, 3326400, 3063060));
    range.PB(MT(534, 3175200, 2882880));
    range.PB(MT(528, 2910600, 2882880));
    range.PB(MT(516, 2882880, 2646000));
    range.PB(MT(503, 2822400, 2162160));
    range.PB(MT(492, 2162160, 2116800));
    range.PB(MT(480, 2042040, 1663200));
    range.PB(MT(472, 1995840, 1801800));
    range.PB(MT(456, 1801800, 1693440));
    range.PB(MT(453, 1587600, 1441440));
    range.PB(MT(440, 1512000, 1441440));
    range.PB(MT(432, 1441440, 1323000));
    range.PB(MT(424, 1411200, 1081080));
    range.PB(MT(416, 1330560, 1201200));
    range.PB(MT(412, 1108800, 1081080));
    range.PB(MT(408, 1081080, 1058400));
    range.PB(MT(396, 1058400, 720720));
    range.PB(MT(390, 907200, 720720));
    range.PB(MT(372, 720720, 604800));
    range.PB(MT(352, 665280, 600600));
    range.PB(MT(340, 635040, 600600));
    range.PB(MT(336, 554400, 540540));
    range.PB(MT(332, 529200, 480480));
    range.PB(MT(324, 453600, 360360));
    range.PB(MT(312, 360360, 302400));
    range.PB(MT(288, 302400, 240240));
    range.PB(MT(272, 264600, 240240));
    range.PB(MT(270, 240240, 226800));
    range.PB(MT(258, 226800, 180180));
    range.PB(MT(252, 180180, 151200));
    range.PB(MT(240, 151200, 120120));
    range.PB(MT(224, 120960, 120120));
    range.PB(MT(222, 120120, 100800));
    range.PB(MT(216, 113400, 110880));
    range.PB(MT(206, 100800, 83160));
    range.PB(MT(200, 92400, 90720));
    range.PB(MT(192, 75600, 60060));
    range.PB(MT(184, 60480, 60060));
    range.PB(MT(180, 60060, 50400));
    range.PB(MT(174, 55440, 43200));
    range.PB(MT(168, 50400, 41580));
    range.PB(MT(164, 46200, 45360));
    range.PB(MT(160, 37800, 36960));
    range.PB(MT(151, 36960, 32400));
    range.PB(MT(148, 33600, 27720));
    range.PB(MT(147, 32400, 27720));
    range.PB(MT(144, 27720, 21600));
    range.PB(MT(132, 21600, 18480));
    range.PB(MT(128, 18900, 18480));
    range.PB(MT(124, 18480, 16200));
    range.PB(MT(120, 16800, 13860));
    range.PB(MT(117, 14400, 13860));
    range.PB(MT(114, 13860, 10800));
    range.PB(MT(108, 10800, 9240));
    range.PB(MT(104, 9240, 8640));
    range.PB(MT(96, 8640, 8400));
    range.PB(MT(94, 7560, 7200));
    range.PB(MT(90, 7200, 6930));
    range.PB(MT(88, 6720, 5400));
    range.PB(MT(86, 6480, 4620));
    range.PB(MT(84, 4620, 4320));
    range.PB(MT(80, 4320, 4200));
    range.PB(MT(75, 3780, 3600));
    range.PB(MT(73, 3600, 3360));
    range.PB(MT(72, 3360, 2700));
    range.PB(MT(68, 2520, 2400));
    range.PB(MT(64, 2160, 2100));
    range.PB(MT(60, 1800, 1680));
    range.PB(MT(58, 1680, 1620));
    range.PB(MT(54, 1260, 1200));
    range.PB(MT(48, 864, 840));
    range.PB(MT(46, 840, 720));
    range.PB(MT(42, 720, 630));
    range.PB(MT(40, 630, 600));
    range.PB(MT(39, 576, 420));
    range.PB(MT(38, 432, 420));
    range.PB(MT(36, 420, 360));
    range.PB(MT(32, 360, 210));
    range.PB(MT(30, 288, 210));
    range.PB(MT(28, 216, 210));
    range.PB(MT(27, 210, 144));
    range.PB(MT(26, 192, 180));
    range.PB(MT(24, 180, 144));
    range.PB(MT(23, 144, 120));
    range.PB(MT(22, 120, 108));
    range.PB(MT(20, 96, 90));
    range.PB(MT(18, 72, 60));
    range.PB(MT(16, 60, 54));
    range.PB(MT(14, 48, 30));

    //get ans;
    tuple<ll,ll,ll> ans;
    for(int i =range.size()-1; i>=0; i--){
        if(i == 0){
            ans = range[i];
            break;
        }else if(get<1>(range[i-1]) > n){
            ans = range[i];
            break;
        }
    }

    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int op = 0;
    for (int test = 1; test <= 100000; test++) {
        cout << "TEST nr." << test << " = ";
        if (op == 1) {
            getData();
        } else {
            getRandom();
        }

        tuple<ll, ll, ll> ansB = brute();
        tuple<ll, ll, ll> ansS = solve();
        if (get<0>(ansB) != get<0>(ansS)) {
            cout << "ERROR\n";
            cout << "BRUTE: \n";
            cout << get<0>(ansB) << "\n";
            cout << get<1>(ansB) << " " << get<2>(ansB) << "\n";
            cout << "SOLVE: \n";
            cout << get<0>(ansS) << "\n";
            cout << get<1>(ansS) << " " << get<2>(ansS) << "\n";
            printData();
            return 0;
        }
        cout<<"CORRECT\n";
    }

    return 0;
}